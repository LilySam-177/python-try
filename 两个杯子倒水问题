# #water pool
# def water_pool(x,y,X,Y):
#     return {
#         (x,0):'empty y',(0,y):'empty x',
#         (x,Y):'full y',(X,y):'full x',
#         (0,x+y) if x + y <= Y else (x + y -Y,Y): 'x pool to y',
#         (x+y, 0) if x + y <= X else (X, x+y-X): 'y pool to x',
#     }
# 
# def search_solution(capacity1,capacity2,goal,start=(0,0)):
#     if goal in start: return[start]
# 
#     explored = set()
# 
#     paths = [[('init',start)]]
# 
#     while paths:
#         path = paths.pop(0)
#         (x,y) = path[-1][-1]
#         for state, action in water_pool(x,y,capacity1,capacity2).items():
#             if state in explored: continue
#             new_path = path +[(action,state)]
#             if goal in state:
#                 return new_path
#             else:
#                 paths.append(new_path)
#             explored.add(state)
#         explored.add((x,y))
#     return []
# 
# def get_solution(c1,c2,goal,start=(0,0)):
# 
#     solution = search_solution(c1,c2,goal,start)
#     for s,i in enumerate(solution):      # enumerate函数，同时列出数据和数据下标，enumerate(sequence, [start=0])
#         print('step{},{}'.format(s,i))
# 
# if __name__ =='__main__':
#     get_solution(9,4,6)
